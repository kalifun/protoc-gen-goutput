package generator

import (
	"fmt"

	op "github.com/kalifun/protoc-gen-goutput/goutput"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

type Goutput struct{}

func (g Goutput) Generate(plugin *protogen.Plugin) error {
	if len(plugin.Files) < 1 {
		return nil
	}

	// 指定生成文件的文件名
	filename := "/api.unknow.go"
	// 创建一个文件生成器对象
	gf := plugin.NewGeneratedFile(filename, plugin.Files[len(plugin.Files)-1].GoImportPath)
	// 调用g.P就是往文件开始写入自己期待的代码
	gf.P(`// Copyright (c) 2021, whiteCcinn Inc.`)
	gf.P("// Code generated by protoc-gen-unknow. DO NOT EDIT.")
	gf.P("// source: all MethodOptions(unknow.api.http) in proto file")
	gf.P()
	gf.P("package ", plugin.Files[len(plugin.Files)-1].GoPackageName)
	for _, f := range plugin.Files {
		if f.Generate {
			// 每个文件创建一个自己的api文件
			fmt.Printf("%v \n", f.Proto.Name)

			// genf := plugin.NewGeneratedFile()
		}
	}
	return nil
}

func (g Goutput) genService(gf *protogen.GeneratedFile, srv *protogen.Service) error {
	for _, method := range srv.Methods {
		option, ok := method.Desc.Options().(*descriptorpb.MethodOptions)
		if !ok {
			continue
		}

		router, ok := proto.GetExtension(option, op.E_Api).(*op.Router)
		if !ok {
			continue
		}
		m := router.GetMethod()
		fmt.Println(m)
	}
	return nil
}
